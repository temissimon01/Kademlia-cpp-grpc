// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kademlia.proto
#ifndef GRPC_kademlia_2eproto__INCLUDED
#define GRPC_kademlia_2eproto__INCLUDED

#include "kademlia.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace kademlia_rpc {

class Communication final {
 public:
  static constexpr char const* service_full_name() {
    return "kademlia_rpc.Communication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery& request, ::kademlia_rpc::PingReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::PingReply>> Asyncping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::PingReply>>(AsyncpingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::PingReply>> PrepareAsyncping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::PingReply>>(PrepareAsyncpingRaw(context, request, cq));
    }
    virtual ::grpc::Status find_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery& request, ::kademlia_rpc::FindNodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::FindNodeReply>> Asyncfind_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::FindNodeReply>>(Asyncfind_nodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::FindNodeReply>> PrepareAsyncfind_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::FindNodeReply>>(PrepareAsyncfind_nodeRaw(context, request, cq));
    }
    virtual ::grpc::Status store(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery& request, ::kademlia_rpc::StoreReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::StoreReply>> Asyncstore(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::StoreReply>>(AsyncstoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::StoreReply>> PrepareAsyncstore(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::StoreReply>>(PrepareAsyncstoreRaw(context, request, cq));
    }
    virtual ::grpc::Status get(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery& request, ::kademlia_rpc::GetReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::GetReply>> Asyncget(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::GetReply>>(AsyncgetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::GetReply>> PrepareAsyncget(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::GetReply>>(PrepareAsyncgetRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery* request, ::kademlia_rpc::PingReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery* request, ::kademlia_rpc::PingReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery* request, ::kademlia_rpc::PingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void find_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery* request, ::kademlia_rpc::FindNodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void find_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery* request, ::kademlia_rpc::FindNodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void find_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery* request, ::kademlia_rpc::FindNodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void store(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery* request, ::kademlia_rpc::StoreReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void store(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery* request, ::kademlia_rpc::StoreReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void store(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery* request, ::kademlia_rpc::StoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void get(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery* request, ::kademlia_rpc::GetReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void get(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery* request, ::kademlia_rpc::GetReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void get(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery* request, ::kademlia_rpc::GetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::PingReply>* AsyncpingRaw(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::PingReply>* PrepareAsyncpingRaw(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::FindNodeReply>* Asyncfind_nodeRaw(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::FindNodeReply>* PrepareAsyncfind_nodeRaw(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::StoreReply>* AsyncstoreRaw(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::StoreReply>* PrepareAsyncstoreRaw(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::GetReply>* AsyncgetRaw(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kademlia_rpc::GetReply>* PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery& request, ::kademlia_rpc::PingReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::PingReply>> Asyncping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::PingReply>>(AsyncpingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::PingReply>> PrepareAsyncping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::PingReply>>(PrepareAsyncpingRaw(context, request, cq));
    }
    ::grpc::Status find_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery& request, ::kademlia_rpc::FindNodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::FindNodeReply>> Asyncfind_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::FindNodeReply>>(Asyncfind_nodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::FindNodeReply>> PrepareAsyncfind_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::FindNodeReply>>(PrepareAsyncfind_nodeRaw(context, request, cq));
    }
    ::grpc::Status store(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery& request, ::kademlia_rpc::StoreReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::StoreReply>> Asyncstore(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::StoreReply>>(AsyncstoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::StoreReply>> PrepareAsyncstore(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::StoreReply>>(PrepareAsyncstoreRaw(context, request, cq));
    }
    ::grpc::Status get(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery& request, ::kademlia_rpc::GetReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::GetReply>> Asyncget(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::GetReply>>(AsyncgetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::GetReply>> PrepareAsyncget(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::GetReply>>(PrepareAsyncgetRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery* request, ::kademlia_rpc::PingReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery* request, ::kademlia_rpc::PingReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ping(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery* request, ::kademlia_rpc::PingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void find_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery* request, ::kademlia_rpc::FindNodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void find_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery* request, ::kademlia_rpc::FindNodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void find_node(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery* request, ::kademlia_rpc::FindNodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void store(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery* request, ::kademlia_rpc::StoreReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void store(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery* request, ::kademlia_rpc::StoreReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void store(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery* request, ::kademlia_rpc::StoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void get(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery* request, ::kademlia_rpc::GetReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void get(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery* request, ::kademlia_rpc::GetReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void get(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery* request, ::kademlia_rpc::GetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::PingReply>* AsyncpingRaw(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::PingReply>* PrepareAsyncpingRaw(::grpc::ClientContext* context, const ::kademlia_rpc::PingQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::FindNodeReply>* Asyncfind_nodeRaw(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::FindNodeReply>* PrepareAsyncfind_nodeRaw(::grpc::ClientContext* context, const ::kademlia_rpc::FindNodeQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::StoreReply>* AsyncstoreRaw(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::StoreReply>* PrepareAsyncstoreRaw(::grpc::ClientContext* context, const ::kademlia_rpc::StoreQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::GetReply>* AsyncgetRaw(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kademlia_rpc::GetReply>* PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::kademlia_rpc::GetQuery& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ping_;
    const ::grpc::internal::RpcMethod rpcmethod_find_node_;
    const ::grpc::internal::RpcMethod rpcmethod_store_;
    const ::grpc::internal::RpcMethod rpcmethod_get_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ping(::grpc::ServerContext* context, const ::kademlia_rpc::PingQuery* request, ::kademlia_rpc::PingReply* response);
    virtual ::grpc::Status find_node(::grpc::ServerContext* context, const ::kademlia_rpc::FindNodeQuery* request, ::kademlia_rpc::FindNodeReply* response);
    virtual ::grpc::Status store(::grpc::ServerContext* context, const ::kademlia_rpc::StoreQuery* request, ::kademlia_rpc::StoreReply* response);
    virtual ::grpc::Status get(::grpc::ServerContext* context, const ::kademlia_rpc::GetQuery* request, ::kademlia_rpc::GetReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::PingQuery* /*request*/, ::kademlia_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestping(::grpc::ServerContext* context, ::kademlia_rpc::PingQuery* request, ::grpc::ServerAsyncResponseWriter< ::kademlia_rpc::PingReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_find_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_find_node() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_find_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status find_node(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::FindNodeQuery* /*request*/, ::kademlia_rpc::FindNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfind_node(::grpc::ServerContext* context, ::kademlia_rpc::FindNodeQuery* request, ::grpc::ServerAsyncResponseWriter< ::kademlia_rpc::FindNodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_store() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status store(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::StoreQuery* /*request*/, ::kademlia_rpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststore(::grpc::ServerContext* context, ::kademlia_rpc::StoreQuery* request, ::grpc::ServerAsyncResponseWriter< ::kademlia_rpc::StoreReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::GetQuery* /*request*/, ::kademlia_rpc::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget(::grpc::ServerContext* context, ::kademlia_rpc::GetQuery* request, ::grpc::ServerAsyncResponseWriter< ::kademlia_rpc::GetReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ping<WithAsyncMethod_find_node<WithAsyncMethod_store<WithAsyncMethod_get<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::kademlia_rpc::PingQuery, ::kademlia_rpc::PingReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::kademlia_rpc::PingQuery* request, ::kademlia_rpc::PingReply* response) { return this->ping(context, request, response); }));}
    void SetMessageAllocatorFor_ping(
        ::grpc::experimental::MessageAllocator< ::kademlia_rpc::PingQuery, ::kademlia_rpc::PingReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kademlia_rpc::PingQuery, ::kademlia_rpc::PingReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::PingQuery* /*request*/, ::kademlia_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ping(
      ::grpc::CallbackServerContext* /*context*/, const ::kademlia_rpc::PingQuery* /*request*/, ::kademlia_rpc::PingReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::kademlia_rpc::PingQuery* /*request*/, ::kademlia_rpc::PingReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_find_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_find_node() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::kademlia_rpc::FindNodeQuery, ::kademlia_rpc::FindNodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::kademlia_rpc::FindNodeQuery* request, ::kademlia_rpc::FindNodeReply* response) { return this->find_node(context, request, response); }));}
    void SetMessageAllocatorFor_find_node(
        ::grpc::experimental::MessageAllocator< ::kademlia_rpc::FindNodeQuery, ::kademlia_rpc::FindNodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kademlia_rpc::FindNodeQuery, ::kademlia_rpc::FindNodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_find_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status find_node(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::FindNodeQuery* /*request*/, ::kademlia_rpc::FindNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* find_node(
      ::grpc::CallbackServerContext* /*context*/, const ::kademlia_rpc::FindNodeQuery* /*request*/, ::kademlia_rpc::FindNodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* find_node(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::kademlia_rpc::FindNodeQuery* /*request*/, ::kademlia_rpc::FindNodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_store() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::kademlia_rpc::StoreQuery, ::kademlia_rpc::StoreReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::kademlia_rpc::StoreQuery* request, ::kademlia_rpc::StoreReply* response) { return this->store(context, request, response); }));}
    void SetMessageAllocatorFor_store(
        ::grpc::experimental::MessageAllocator< ::kademlia_rpc::StoreQuery, ::kademlia_rpc::StoreReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kademlia_rpc::StoreQuery, ::kademlia_rpc::StoreReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status store(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::StoreQuery* /*request*/, ::kademlia_rpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* store(
      ::grpc::CallbackServerContext* /*context*/, const ::kademlia_rpc::StoreQuery* /*request*/, ::kademlia_rpc::StoreReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* store(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::kademlia_rpc::StoreQuery* /*request*/, ::kademlia_rpc::StoreReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_get() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::kademlia_rpc::GetQuery, ::kademlia_rpc::GetReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::kademlia_rpc::GetQuery* request, ::kademlia_rpc::GetReply* response) { return this->get(context, request, response); }));}
    void SetMessageAllocatorFor_get(
        ::grpc::experimental::MessageAllocator< ::kademlia_rpc::GetQuery, ::kademlia_rpc::GetReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kademlia_rpc::GetQuery, ::kademlia_rpc::GetReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::GetQuery* /*request*/, ::kademlia_rpc::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* get(
      ::grpc::CallbackServerContext* /*context*/, const ::kademlia_rpc::GetQuery* /*request*/, ::kademlia_rpc::GetReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* get(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::kademlia_rpc::GetQuery* /*request*/, ::kademlia_rpc::GetReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ping<ExperimentalWithCallbackMethod_find_node<ExperimentalWithCallbackMethod_store<ExperimentalWithCallbackMethod_get<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ping<ExperimentalWithCallbackMethod_find_node<ExperimentalWithCallbackMethod_store<ExperimentalWithCallbackMethod_get<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::PingQuery* /*request*/, ::kademlia_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_find_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_find_node() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_find_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status find_node(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::FindNodeQuery* /*request*/, ::kademlia_rpc::FindNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_store() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status store(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::StoreQuery* /*request*/, ::kademlia_rpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::GetQuery* /*request*/, ::kademlia_rpc::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::PingQuery* /*request*/, ::kademlia_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestping(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_find_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_find_node() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_find_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status find_node(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::FindNodeQuery* /*request*/, ::kademlia_rpc::FindNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfind_node(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_store() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status store(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::StoreQuery* /*request*/, ::kademlia_rpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::GetQuery* /*request*/, ::kademlia_rpc::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ping(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::PingQuery* /*request*/, ::kademlia_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_find_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_find_node() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->find_node(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_find_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status find_node(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::FindNodeQuery* /*request*/, ::kademlia_rpc::FindNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* find_node(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* find_node(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_store() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->store(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status store(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::StoreQuery* /*request*/, ::kademlia_rpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* store(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* store(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_get() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::GetQuery* /*request*/, ::kademlia_rpc::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* get(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kademlia_rpc::PingQuery, ::kademlia_rpc::PingReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kademlia_rpc::PingQuery, ::kademlia_rpc::PingReply>* streamer) {
                       return this->Streamedping(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::PingQuery* /*request*/, ::kademlia_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedping(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kademlia_rpc::PingQuery,::kademlia_rpc::PingReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_find_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_find_node() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kademlia_rpc::FindNodeQuery, ::kademlia_rpc::FindNodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kademlia_rpc::FindNodeQuery, ::kademlia_rpc::FindNodeReply>* streamer) {
                       return this->Streamedfind_node(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_find_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status find_node(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::FindNodeQuery* /*request*/, ::kademlia_rpc::FindNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedfind_node(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kademlia_rpc::FindNodeQuery,::kademlia_rpc::FindNodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_store() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kademlia_rpc::StoreQuery, ::kademlia_rpc::StoreReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kademlia_rpc::StoreQuery, ::kademlia_rpc::StoreReply>* streamer) {
                       return this->Streamedstore(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status store(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::StoreQuery* /*request*/, ::kademlia_rpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kademlia_rpc::StoreQuery,::kademlia_rpc::StoreReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kademlia_rpc::GetQuery, ::kademlia_rpc::GetReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kademlia_rpc::GetQuery, ::kademlia_rpc::GetReply>* streamer) {
                       return this->Streamedget(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::kademlia_rpc::GetQuery* /*request*/, ::kademlia_rpc::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kademlia_rpc::GetQuery,::kademlia_rpc::GetReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ping<WithStreamedUnaryMethod_find_node<WithStreamedUnaryMethod_store<WithStreamedUnaryMethod_get<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ping<WithStreamedUnaryMethod_find_node<WithStreamedUnaryMethod_store<WithStreamedUnaryMethod_get<Service > > > > StreamedService;
};

}  // namespace kademlia_rpc


#endif  // GRPC_kademlia_2eproto__INCLUDED
