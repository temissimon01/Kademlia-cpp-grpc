// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kademlia.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kademlia_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kademlia_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kademlia_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kademlia_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kademlia_2eproto;
namespace kademlia_rpc {
class ConnectionInfo;
class ConnectionInfoDefaultTypeInternal;
extern ConnectionInfoDefaultTypeInternal _ConnectionInfo_default_instance_;
class FindNodeQuery;
class FindNodeQueryDefaultTypeInternal;
extern FindNodeQueryDefaultTypeInternal _FindNodeQuery_default_instance_;
class FindNodeReply;
class FindNodeReplyDefaultTypeInternal;
extern FindNodeReplyDefaultTypeInternal _FindNodeReply_default_instance_;
class GetQuery;
class GetQueryDefaultTypeInternal;
extern GetQueryDefaultTypeInternal _GetQuery_default_instance_;
class GetReply;
class GetReplyDefaultTypeInternal;
extern GetReplyDefaultTypeInternal _GetReply_default_instance_;
class PingQuery;
class PingQueryDefaultTypeInternal;
extern PingQueryDefaultTypeInternal _PingQuery_default_instance_;
class PingReply;
class PingReplyDefaultTypeInternal;
extern PingReplyDefaultTypeInternal _PingReply_default_instance_;
class StoreQuery;
class StoreQueryDefaultTypeInternal;
extern StoreQueryDefaultTypeInternal _StoreQuery_default_instance_;
class StoreReply;
class StoreReplyDefaultTypeInternal;
extern StoreReplyDefaultTypeInternal _StoreReply_default_instance_;
}  // namespace kademlia_rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::kademlia_rpc::ConnectionInfo* Arena::CreateMaybeMessage<::kademlia_rpc::ConnectionInfo>(Arena*);
template<> ::kademlia_rpc::FindNodeQuery* Arena::CreateMaybeMessage<::kademlia_rpc::FindNodeQuery>(Arena*);
template<> ::kademlia_rpc::FindNodeReply* Arena::CreateMaybeMessage<::kademlia_rpc::FindNodeReply>(Arena*);
template<> ::kademlia_rpc::GetQuery* Arena::CreateMaybeMessage<::kademlia_rpc::GetQuery>(Arena*);
template<> ::kademlia_rpc::GetReply* Arena::CreateMaybeMessage<::kademlia_rpc::GetReply>(Arena*);
template<> ::kademlia_rpc::PingQuery* Arena::CreateMaybeMessage<::kademlia_rpc::PingQuery>(Arena*);
template<> ::kademlia_rpc::PingReply* Arena::CreateMaybeMessage<::kademlia_rpc::PingReply>(Arena*);
template<> ::kademlia_rpc::StoreQuery* Arena::CreateMaybeMessage<::kademlia_rpc::StoreQuery>(Arena*);
template<> ::kademlia_rpc::StoreReply* Arena::CreateMaybeMessage<::kademlia_rpc::StoreReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kademlia_rpc {

// ===================================================================

class ConnectionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kademlia_rpc.ConnectionInfo) */ {
 public:
  inline ConnectionInfo() : ConnectionInfo(nullptr) {}
  virtual ~ConnectionInfo();

  ConnectionInfo(const ConnectionInfo& from);
  ConnectionInfo(ConnectionInfo&& from) noexcept
    : ConnectionInfo() {
    *this = ::std::move(from);
  }

  inline ConnectionInfo& operator=(const ConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionInfo& operator=(ConnectionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionInfo& default_instance();

  static inline const ConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const ConnectionInfo*>(
               &_ConnectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionInfo& a, ConnectionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionInfo* New() const final {
    return CreateMaybeMessage<ConnectionInfo>(nullptr);
  }

  ConnectionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionInfo& from);
  void MergeFrom(const ConnectionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kademlia_rpc.ConnectionInfo";
  }
  protected:
  explicit ConnectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kademlia_2eproto);
    return ::descriptor_table_kademlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kademlia_rpc.ConnectionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kademlia_2eproto;
};
// -------------------------------------------------------------------

class PingQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kademlia_rpc.PingQuery) */ {
 public:
  inline PingQuery() : PingQuery(nullptr) {}
  virtual ~PingQuery();

  PingQuery(const PingQuery& from);
  PingQuery(PingQuery&& from) noexcept
    : PingQuery() {
    *this = ::std::move(from);
  }

  inline PingQuery& operator=(const PingQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingQuery& operator=(PingQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingQuery& default_instance();

  static inline const PingQuery* internal_default_instance() {
    return reinterpret_cast<const PingQuery*>(
               &_PingQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PingQuery& a, PingQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(PingQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingQuery* New() const final {
    return CreateMaybeMessage<PingQuery>(nullptr);
  }

  PingQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingQuery& from);
  void MergeFrom(const PingQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kademlia_rpc.PingQuery";
  }
  protected:
  explicit PingQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kademlia_2eproto);
    return ::descriptor_table_kademlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallerFieldNumber = 2,
    kMagicFieldNumber = 1,
  };
  // .kademlia_rpc.ConnectionInfo caller = 2;
  bool has_caller() const;
  private:
  bool _internal_has_caller() const;
  public:
  void clear_caller();
  const ::kademlia_rpc::ConnectionInfo& caller() const;
  ::kademlia_rpc::ConnectionInfo* release_caller();
  ::kademlia_rpc::ConnectionInfo* mutable_caller();
  void set_allocated_caller(::kademlia_rpc::ConnectionInfo* caller);
  private:
  const ::kademlia_rpc::ConnectionInfo& _internal_caller() const;
  ::kademlia_rpc::ConnectionInfo* _internal_mutable_caller();
  public:
  void unsafe_arena_set_allocated_caller(
      ::kademlia_rpc::ConnectionInfo* caller);
  ::kademlia_rpc::ConnectionInfo* unsafe_arena_release_caller();

  // uint64 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint64 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kademlia_rpc.PingQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kademlia_rpc::ConnectionInfo* caller_;
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kademlia_2eproto;
};
// -------------------------------------------------------------------

class PingReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kademlia_rpc.PingReply) */ {
 public:
  inline PingReply() : PingReply(nullptr) {}
  virtual ~PingReply();

  PingReply(const PingReply& from);
  PingReply(PingReply&& from) noexcept
    : PingReply() {
    *this = ::std::move(from);
  }

  inline PingReply& operator=(const PingReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingReply& operator=(PingReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingReply& default_instance();

  static inline const PingReply* internal_default_instance() {
    return reinterpret_cast<const PingReply*>(
               &_PingReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PingReply& a, PingReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PingReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingReply* New() const final {
    return CreateMaybeMessage<PingReply>(nullptr);
  }

  PingReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingReply& from);
  void MergeFrom(const PingReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kademlia_rpc.PingReply";
  }
  protected:
  explicit PingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kademlia_2eproto);
    return ::descriptor_table_kademlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
  };
  // uint64 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint64 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kademlia_rpc.PingReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kademlia_2eproto;
};
// -------------------------------------------------------------------

class FindNodeQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kademlia_rpc.FindNodeQuery) */ {
 public:
  inline FindNodeQuery() : FindNodeQuery(nullptr) {}
  virtual ~FindNodeQuery();

  FindNodeQuery(const FindNodeQuery& from);
  FindNodeQuery(FindNodeQuery&& from) noexcept
    : FindNodeQuery() {
    *this = ::std::move(from);
  }

  inline FindNodeQuery& operator=(const FindNodeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodeQuery& operator=(FindNodeQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNodeQuery& default_instance();

  static inline const FindNodeQuery* internal_default_instance() {
    return reinterpret_cast<const FindNodeQuery*>(
               &_FindNodeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FindNodeQuery& a, FindNodeQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodeQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodeQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNodeQuery* New() const final {
    return CreateMaybeMessage<FindNodeQuery>(nullptr);
  }

  FindNodeQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNodeQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNodeQuery& from);
  void MergeFrom(const FindNodeQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodeQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kademlia_rpc.FindNodeQuery";
  }
  protected:
  explicit FindNodeQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kademlia_2eproto);
    return ::descriptor_table_kademlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationFieldNumber = 2,
    kCallerFieldNumber = 1,
  };
  // string destination = 2;
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // .kademlia_rpc.ConnectionInfo caller = 1;
  bool has_caller() const;
  private:
  bool _internal_has_caller() const;
  public:
  void clear_caller();
  const ::kademlia_rpc::ConnectionInfo& caller() const;
  ::kademlia_rpc::ConnectionInfo* release_caller();
  ::kademlia_rpc::ConnectionInfo* mutable_caller();
  void set_allocated_caller(::kademlia_rpc::ConnectionInfo* caller);
  private:
  const ::kademlia_rpc::ConnectionInfo& _internal_caller() const;
  ::kademlia_rpc::ConnectionInfo* _internal_mutable_caller();
  public:
  void unsafe_arena_set_allocated_caller(
      ::kademlia_rpc::ConnectionInfo* caller);
  ::kademlia_rpc::ConnectionInfo* unsafe_arena_release_caller();

  // @@protoc_insertion_point(class_scope:kademlia_rpc.FindNodeQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::kademlia_rpc::ConnectionInfo* caller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kademlia_2eproto;
};
// -------------------------------------------------------------------

class FindNodeReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kademlia_rpc.FindNodeReply) */ {
 public:
  inline FindNodeReply() : FindNodeReply(nullptr) {}
  virtual ~FindNodeReply();

  FindNodeReply(const FindNodeReply& from);
  FindNodeReply(FindNodeReply&& from) noexcept
    : FindNodeReply() {
    *this = ::std::move(from);
  }

  inline FindNodeReply& operator=(const FindNodeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodeReply& operator=(FindNodeReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNodeReply& default_instance();

  static inline const FindNodeReply* internal_default_instance() {
    return reinterpret_cast<const FindNodeReply*>(
               &_FindNodeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FindNodeReply& a, FindNodeReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodeReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodeReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNodeReply* New() const final {
    return CreateMaybeMessage<FindNodeReply>(nullptr);
  }

  FindNodeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNodeReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNodeReply& from);
  void MergeFrom(const FindNodeReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodeReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kademlia_rpc.FindNodeReply";
  }
  protected:
  explicit FindNodeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kademlia_2eproto);
    return ::descriptor_table_kademlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClosestFieldNumber = 1,
  };
  // repeated .kademlia_rpc.ConnectionInfo closest = 1;
  int closest_size() const;
  private:
  int _internal_closest_size() const;
  public:
  void clear_closest();
  ::kademlia_rpc::ConnectionInfo* mutable_closest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kademlia_rpc::ConnectionInfo >*
      mutable_closest();
  private:
  const ::kademlia_rpc::ConnectionInfo& _internal_closest(int index) const;
  ::kademlia_rpc::ConnectionInfo* _internal_add_closest();
  public:
  const ::kademlia_rpc::ConnectionInfo& closest(int index) const;
  ::kademlia_rpc::ConnectionInfo* add_closest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kademlia_rpc::ConnectionInfo >&
      closest() const;

  // @@protoc_insertion_point(class_scope:kademlia_rpc.FindNodeReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kademlia_rpc::ConnectionInfo > closest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kademlia_2eproto;
};
// -------------------------------------------------------------------

class StoreQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kademlia_rpc.StoreQuery) */ {
 public:
  inline StoreQuery() : StoreQuery(nullptr) {}
  virtual ~StoreQuery();

  StoreQuery(const StoreQuery& from);
  StoreQuery(StoreQuery&& from) noexcept
    : StoreQuery() {
    *this = ::std::move(from);
  }

  inline StoreQuery& operator=(const StoreQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreQuery& operator=(StoreQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreQuery& default_instance();

  static inline const StoreQuery* internal_default_instance() {
    return reinterpret_cast<const StoreQuery*>(
               &_StoreQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StoreQuery& a, StoreQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreQuery* New() const final {
    return CreateMaybeMessage<StoreQuery>(nullptr);
  }

  StoreQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreQuery& from);
  void MergeFrom(const StoreQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kademlia_rpc.StoreQuery";
  }
  protected:
  explicit StoreQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kademlia_2eproto);
    return ::descriptor_table_kademlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kValueFieldNumber = 4,
    kCallerFieldNumber = 2,
    kMagicFieldNumber = 1,
  };
  // string key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .kademlia_rpc.ConnectionInfo caller = 2;
  bool has_caller() const;
  private:
  bool _internal_has_caller() const;
  public:
  void clear_caller();
  const ::kademlia_rpc::ConnectionInfo& caller() const;
  ::kademlia_rpc::ConnectionInfo* release_caller();
  ::kademlia_rpc::ConnectionInfo* mutable_caller();
  void set_allocated_caller(::kademlia_rpc::ConnectionInfo* caller);
  private:
  const ::kademlia_rpc::ConnectionInfo& _internal_caller() const;
  ::kademlia_rpc::ConnectionInfo* _internal_mutable_caller();
  public:
  void unsafe_arena_set_allocated_caller(
      ::kademlia_rpc::ConnectionInfo* caller);
  ::kademlia_rpc::ConnectionInfo* unsafe_arena_release_caller();

  // uint64 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint64 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kademlia_rpc.StoreQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::kademlia_rpc::ConnectionInfo* caller_;
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kademlia_2eproto;
};
// -------------------------------------------------------------------

class StoreReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kademlia_rpc.StoreReply) */ {
 public:
  inline StoreReply() : StoreReply(nullptr) {}
  virtual ~StoreReply();

  StoreReply(const StoreReply& from);
  StoreReply(StoreReply&& from) noexcept
    : StoreReply() {
    *this = ::std::move(from);
  }

  inline StoreReply& operator=(const StoreReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreReply& operator=(StoreReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreReply& default_instance();

  static inline const StoreReply* internal_default_instance() {
    return reinterpret_cast<const StoreReply*>(
               &_StoreReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StoreReply& a, StoreReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreReply* New() const final {
    return CreateMaybeMessage<StoreReply>(nullptr);
  }

  StoreReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreReply& from);
  void MergeFrom(const StoreReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kademlia_rpc.StoreReply";
  }
  protected:
  explicit StoreReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kademlia_2eproto);
    return ::descriptor_table_kademlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
  };
  // uint64 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint64 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kademlia_rpc.StoreReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kademlia_2eproto;
};
// -------------------------------------------------------------------

class GetQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kademlia_rpc.GetQuery) */ {
 public:
  inline GetQuery() : GetQuery(nullptr) {}
  virtual ~GetQuery();

  GetQuery(const GetQuery& from);
  GetQuery(GetQuery&& from) noexcept
    : GetQuery() {
    *this = ::std::move(from);
  }

  inline GetQuery& operator=(const GetQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetQuery& operator=(GetQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetQuery& default_instance();

  static inline const GetQuery* internal_default_instance() {
    return reinterpret_cast<const GetQuery*>(
               &_GetQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetQuery& a, GetQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(GetQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetQuery* New() const final {
    return CreateMaybeMessage<GetQuery>(nullptr);
  }

  GetQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetQuery& from);
  void MergeFrom(const GetQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kademlia_rpc.GetQuery";
  }
  protected:
  explicit GetQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kademlia_2eproto);
    return ::descriptor_table_kademlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kCallerFieldNumber = 2,
    kMagicFieldNumber = 1,
  };
  // string key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .kademlia_rpc.ConnectionInfo caller = 2;
  bool has_caller() const;
  private:
  bool _internal_has_caller() const;
  public:
  void clear_caller();
  const ::kademlia_rpc::ConnectionInfo& caller() const;
  ::kademlia_rpc::ConnectionInfo* release_caller();
  ::kademlia_rpc::ConnectionInfo* mutable_caller();
  void set_allocated_caller(::kademlia_rpc::ConnectionInfo* caller);
  private:
  const ::kademlia_rpc::ConnectionInfo& _internal_caller() const;
  ::kademlia_rpc::ConnectionInfo* _internal_mutable_caller();
  public:
  void unsafe_arena_set_allocated_caller(
      ::kademlia_rpc::ConnectionInfo* caller);
  ::kademlia_rpc::ConnectionInfo* unsafe_arena_release_caller();

  // uint64 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint64 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kademlia_rpc.GetQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::kademlia_rpc::ConnectionInfo* caller_;
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kademlia_2eproto;
};
// -------------------------------------------------------------------

class GetReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kademlia_rpc.GetReply) */ {
 public:
  inline GetReply() : GetReply(nullptr) {}
  virtual ~GetReply();

  GetReply(const GetReply& from);
  GetReply(GetReply&& from) noexcept
    : GetReply() {
    *this = ::std::move(from);
  }

  inline GetReply& operator=(const GetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReply& operator=(GetReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReply& default_instance();

  static inline const GetReply* internal_default_instance() {
    return reinterpret_cast<const GetReply*>(
               &_GetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetReply& a, GetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReply* New() const final {
    return CreateMaybeMessage<GetReply>(nullptr);
  }

  GetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReply& from);
  void MergeFrom(const GetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kademlia_rpc.GetReply";
  }
  protected:
  explicit GetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kademlia_2eproto);
    return ::descriptor_table_kademlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kMagicFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint64 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint64 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kademlia_rpc.GetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kademlia_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionInfo

// string id = 1;
inline void ConnectionInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ConnectionInfo::id() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.ConnectionInfo.id)
  return _internal_id();
}
inline void ConnectionInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.ConnectionInfo.id)
}
inline std::string* ConnectionInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.ConnectionInfo.id)
  return _internal_mutable_id();
}
inline const std::string& ConnectionInfo::_internal_id() const {
  return id_.Get();
}
inline void ConnectionInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConnectionInfo::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kademlia_rpc.ConnectionInfo.id)
}
inline void ConnectionInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kademlia_rpc.ConnectionInfo.id)
}
inline void ConnectionInfo::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kademlia_rpc.ConnectionInfo.id)
}
inline std::string* ConnectionInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConnectionInfo::release_id() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.ConnectionInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.ConnectionInfo.id)
}

// string ip = 2;
inline void ConnectionInfo::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& ConnectionInfo::ip() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.ConnectionInfo.ip)
  return _internal_ip();
}
inline void ConnectionInfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.ConnectionInfo.ip)
}
inline std::string* ConnectionInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.ConnectionInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& ConnectionInfo::_internal_ip() const {
  return ip_.Get();
}
inline void ConnectionInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConnectionInfo::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kademlia_rpc.ConnectionInfo.ip)
}
inline void ConnectionInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kademlia_rpc.ConnectionInfo.ip)
}
inline void ConnectionInfo::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kademlia_rpc.ConnectionInfo.ip)
}
inline std::string* ConnectionInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConnectionInfo::release_ip() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.ConnectionInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.ConnectionInfo.ip)
}

// uint32 port = 3;
inline void ConnectionInfo::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionInfo::port() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.ConnectionInfo.port)
  return _internal_port();
}
inline void ConnectionInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void ConnectionInfo::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.ConnectionInfo.port)
}

// -------------------------------------------------------------------

// PingQuery

// uint64 magic = 1;
inline void PingQuery::clear_magic() {
  magic_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PingQuery::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PingQuery::magic() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.PingQuery.magic)
  return _internal_magic();
}
inline void PingQuery::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  magic_ = value;
}
inline void PingQuery::set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.PingQuery.magic)
}

// .kademlia_rpc.ConnectionInfo caller = 2;
inline bool PingQuery::_internal_has_caller() const {
  return this != internal_default_instance() && caller_ != nullptr;
}
inline bool PingQuery::has_caller() const {
  return _internal_has_caller();
}
inline void PingQuery::clear_caller() {
  if (GetArena() == nullptr && caller_ != nullptr) {
    delete caller_;
  }
  caller_ = nullptr;
}
inline const ::kademlia_rpc::ConnectionInfo& PingQuery::_internal_caller() const {
  const ::kademlia_rpc::ConnectionInfo* p = caller_;
  return p != nullptr ? *p : reinterpret_cast<const ::kademlia_rpc::ConnectionInfo&>(
      ::kademlia_rpc::_ConnectionInfo_default_instance_);
}
inline const ::kademlia_rpc::ConnectionInfo& PingQuery::caller() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.PingQuery.caller)
  return _internal_caller();
}
inline void PingQuery::unsafe_arena_set_allocated_caller(
    ::kademlia_rpc::ConnectionInfo* caller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caller_);
  }
  caller_ = caller;
  if (caller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kademlia_rpc.PingQuery.caller)
}
inline ::kademlia_rpc::ConnectionInfo* PingQuery::release_caller() {
  
  ::kademlia_rpc::ConnectionInfo* temp = caller_;
  caller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kademlia_rpc::ConnectionInfo* PingQuery::unsafe_arena_release_caller() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.PingQuery.caller)
  
  ::kademlia_rpc::ConnectionInfo* temp = caller_;
  caller_ = nullptr;
  return temp;
}
inline ::kademlia_rpc::ConnectionInfo* PingQuery::_internal_mutable_caller() {
  
  if (caller_ == nullptr) {
    auto* p = CreateMaybeMessage<::kademlia_rpc::ConnectionInfo>(GetArena());
    caller_ = p;
  }
  return caller_;
}
inline ::kademlia_rpc::ConnectionInfo* PingQuery::mutable_caller() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.PingQuery.caller)
  return _internal_mutable_caller();
}
inline void PingQuery::set_allocated_caller(::kademlia_rpc::ConnectionInfo* caller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caller_;
  }
  if (caller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caller);
    if (message_arena != submessage_arena) {
      caller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caller, submessage_arena);
    }
    
  } else {
    
  }
  caller_ = caller;
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.PingQuery.caller)
}

// -------------------------------------------------------------------

// PingReply

// uint64 magic = 1;
inline void PingReply::clear_magic() {
  magic_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PingReply::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PingReply::magic() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.PingReply.magic)
  return _internal_magic();
}
inline void PingReply::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  magic_ = value;
}
inline void PingReply::set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.PingReply.magic)
}

// -------------------------------------------------------------------

// FindNodeQuery

// .kademlia_rpc.ConnectionInfo caller = 1;
inline bool FindNodeQuery::_internal_has_caller() const {
  return this != internal_default_instance() && caller_ != nullptr;
}
inline bool FindNodeQuery::has_caller() const {
  return _internal_has_caller();
}
inline void FindNodeQuery::clear_caller() {
  if (GetArena() == nullptr && caller_ != nullptr) {
    delete caller_;
  }
  caller_ = nullptr;
}
inline const ::kademlia_rpc::ConnectionInfo& FindNodeQuery::_internal_caller() const {
  const ::kademlia_rpc::ConnectionInfo* p = caller_;
  return p != nullptr ? *p : reinterpret_cast<const ::kademlia_rpc::ConnectionInfo&>(
      ::kademlia_rpc::_ConnectionInfo_default_instance_);
}
inline const ::kademlia_rpc::ConnectionInfo& FindNodeQuery::caller() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.FindNodeQuery.caller)
  return _internal_caller();
}
inline void FindNodeQuery::unsafe_arena_set_allocated_caller(
    ::kademlia_rpc::ConnectionInfo* caller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caller_);
  }
  caller_ = caller;
  if (caller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kademlia_rpc.FindNodeQuery.caller)
}
inline ::kademlia_rpc::ConnectionInfo* FindNodeQuery::release_caller() {
  
  ::kademlia_rpc::ConnectionInfo* temp = caller_;
  caller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kademlia_rpc::ConnectionInfo* FindNodeQuery::unsafe_arena_release_caller() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.FindNodeQuery.caller)
  
  ::kademlia_rpc::ConnectionInfo* temp = caller_;
  caller_ = nullptr;
  return temp;
}
inline ::kademlia_rpc::ConnectionInfo* FindNodeQuery::_internal_mutable_caller() {
  
  if (caller_ == nullptr) {
    auto* p = CreateMaybeMessage<::kademlia_rpc::ConnectionInfo>(GetArena());
    caller_ = p;
  }
  return caller_;
}
inline ::kademlia_rpc::ConnectionInfo* FindNodeQuery::mutable_caller() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.FindNodeQuery.caller)
  return _internal_mutable_caller();
}
inline void FindNodeQuery::set_allocated_caller(::kademlia_rpc::ConnectionInfo* caller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caller_;
  }
  if (caller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caller);
    if (message_arena != submessage_arena) {
      caller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caller, submessage_arena);
    }
    
  } else {
    
  }
  caller_ = caller;
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.FindNodeQuery.caller)
}

// string destination = 2;
inline void FindNodeQuery::clear_destination() {
  destination_.ClearToEmpty();
}
inline const std::string& FindNodeQuery::destination() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.FindNodeQuery.destination)
  return _internal_destination();
}
inline void FindNodeQuery::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.FindNodeQuery.destination)
}
inline std::string* FindNodeQuery::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.FindNodeQuery.destination)
  return _internal_mutable_destination();
}
inline const std::string& FindNodeQuery::_internal_destination() const {
  return destination_.Get();
}
inline void FindNodeQuery::_internal_set_destination(const std::string& value) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindNodeQuery::set_destination(std::string&& value) {
  
  destination_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kademlia_rpc.FindNodeQuery.destination)
}
inline void FindNodeQuery::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kademlia_rpc.FindNodeQuery.destination)
}
inline void FindNodeQuery::set_destination(const char* value,
    size_t size) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kademlia_rpc.FindNodeQuery.destination)
}
inline std::string* FindNodeQuery::_internal_mutable_destination() {
  
  return destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindNodeQuery::release_destination() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.FindNodeQuery.destination)
  return destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindNodeQuery::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.FindNodeQuery.destination)
}

// -------------------------------------------------------------------

// FindNodeReply

// repeated .kademlia_rpc.ConnectionInfo closest = 1;
inline int FindNodeReply::_internal_closest_size() const {
  return closest_.size();
}
inline int FindNodeReply::closest_size() const {
  return _internal_closest_size();
}
inline void FindNodeReply::clear_closest() {
  closest_.Clear();
}
inline ::kademlia_rpc::ConnectionInfo* FindNodeReply::mutable_closest(int index) {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.FindNodeReply.closest)
  return closest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kademlia_rpc::ConnectionInfo >*
FindNodeReply::mutable_closest() {
  // @@protoc_insertion_point(field_mutable_list:kademlia_rpc.FindNodeReply.closest)
  return &closest_;
}
inline const ::kademlia_rpc::ConnectionInfo& FindNodeReply::_internal_closest(int index) const {
  return closest_.Get(index);
}
inline const ::kademlia_rpc::ConnectionInfo& FindNodeReply::closest(int index) const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.FindNodeReply.closest)
  return _internal_closest(index);
}
inline ::kademlia_rpc::ConnectionInfo* FindNodeReply::_internal_add_closest() {
  return closest_.Add();
}
inline ::kademlia_rpc::ConnectionInfo* FindNodeReply::add_closest() {
  // @@protoc_insertion_point(field_add:kademlia_rpc.FindNodeReply.closest)
  return _internal_add_closest();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kademlia_rpc::ConnectionInfo >&
FindNodeReply::closest() const {
  // @@protoc_insertion_point(field_list:kademlia_rpc.FindNodeReply.closest)
  return closest_;
}

// -------------------------------------------------------------------

// StoreQuery

// uint64 magic = 1;
inline void StoreQuery::clear_magic() {
  magic_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreQuery::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreQuery::magic() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.StoreQuery.magic)
  return _internal_magic();
}
inline void StoreQuery::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  magic_ = value;
}
inline void StoreQuery::set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.StoreQuery.magic)
}

// .kademlia_rpc.ConnectionInfo caller = 2;
inline bool StoreQuery::_internal_has_caller() const {
  return this != internal_default_instance() && caller_ != nullptr;
}
inline bool StoreQuery::has_caller() const {
  return _internal_has_caller();
}
inline void StoreQuery::clear_caller() {
  if (GetArena() == nullptr && caller_ != nullptr) {
    delete caller_;
  }
  caller_ = nullptr;
}
inline const ::kademlia_rpc::ConnectionInfo& StoreQuery::_internal_caller() const {
  const ::kademlia_rpc::ConnectionInfo* p = caller_;
  return p != nullptr ? *p : reinterpret_cast<const ::kademlia_rpc::ConnectionInfo&>(
      ::kademlia_rpc::_ConnectionInfo_default_instance_);
}
inline const ::kademlia_rpc::ConnectionInfo& StoreQuery::caller() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.StoreQuery.caller)
  return _internal_caller();
}
inline void StoreQuery::unsafe_arena_set_allocated_caller(
    ::kademlia_rpc::ConnectionInfo* caller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caller_);
  }
  caller_ = caller;
  if (caller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kademlia_rpc.StoreQuery.caller)
}
inline ::kademlia_rpc::ConnectionInfo* StoreQuery::release_caller() {
  
  ::kademlia_rpc::ConnectionInfo* temp = caller_;
  caller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kademlia_rpc::ConnectionInfo* StoreQuery::unsafe_arena_release_caller() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.StoreQuery.caller)
  
  ::kademlia_rpc::ConnectionInfo* temp = caller_;
  caller_ = nullptr;
  return temp;
}
inline ::kademlia_rpc::ConnectionInfo* StoreQuery::_internal_mutable_caller() {
  
  if (caller_ == nullptr) {
    auto* p = CreateMaybeMessage<::kademlia_rpc::ConnectionInfo>(GetArena());
    caller_ = p;
  }
  return caller_;
}
inline ::kademlia_rpc::ConnectionInfo* StoreQuery::mutable_caller() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.StoreQuery.caller)
  return _internal_mutable_caller();
}
inline void StoreQuery::set_allocated_caller(::kademlia_rpc::ConnectionInfo* caller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caller_;
  }
  if (caller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caller);
    if (message_arena != submessage_arena) {
      caller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caller, submessage_arena);
    }
    
  } else {
    
  }
  caller_ = caller;
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.StoreQuery.caller)
}

// string key = 3;
inline void StoreQuery::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& StoreQuery::key() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.StoreQuery.key)
  return _internal_key();
}
inline void StoreQuery::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.StoreQuery.key)
}
inline std::string* StoreQuery::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.StoreQuery.key)
  return _internal_mutable_key();
}
inline const std::string& StoreQuery::_internal_key() const {
  return key_.Get();
}
inline void StoreQuery::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StoreQuery::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kademlia_rpc.StoreQuery.key)
}
inline void StoreQuery::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kademlia_rpc.StoreQuery.key)
}
inline void StoreQuery::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kademlia_rpc.StoreQuery.key)
}
inline std::string* StoreQuery::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StoreQuery::release_key() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.StoreQuery.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoreQuery::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.StoreQuery.key)
}

// bytes value = 4;
inline void StoreQuery::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& StoreQuery::value() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.StoreQuery.value)
  return _internal_value();
}
inline void StoreQuery::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.StoreQuery.value)
}
inline std::string* StoreQuery::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.StoreQuery.value)
  return _internal_mutable_value();
}
inline const std::string& StoreQuery::_internal_value() const {
  return value_.Get();
}
inline void StoreQuery::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StoreQuery::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kademlia_rpc.StoreQuery.value)
}
inline void StoreQuery::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kademlia_rpc.StoreQuery.value)
}
inline void StoreQuery::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kademlia_rpc.StoreQuery.value)
}
inline std::string* StoreQuery::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StoreQuery::release_value() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.StoreQuery.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoreQuery::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.StoreQuery.value)
}

// -------------------------------------------------------------------

// StoreReply

// uint64 magic = 1;
inline void StoreReply::clear_magic() {
  magic_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreReply::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreReply::magic() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.StoreReply.magic)
  return _internal_magic();
}
inline void StoreReply::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  magic_ = value;
}
inline void StoreReply::set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.StoreReply.magic)
}

// -------------------------------------------------------------------

// GetQuery

// uint64 magic = 1;
inline void GetQuery::clear_magic() {
  magic_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetQuery::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetQuery::magic() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.GetQuery.magic)
  return _internal_magic();
}
inline void GetQuery::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  magic_ = value;
}
inline void GetQuery::set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.GetQuery.magic)
}

// .kademlia_rpc.ConnectionInfo caller = 2;
inline bool GetQuery::_internal_has_caller() const {
  return this != internal_default_instance() && caller_ != nullptr;
}
inline bool GetQuery::has_caller() const {
  return _internal_has_caller();
}
inline void GetQuery::clear_caller() {
  if (GetArena() == nullptr && caller_ != nullptr) {
    delete caller_;
  }
  caller_ = nullptr;
}
inline const ::kademlia_rpc::ConnectionInfo& GetQuery::_internal_caller() const {
  const ::kademlia_rpc::ConnectionInfo* p = caller_;
  return p != nullptr ? *p : reinterpret_cast<const ::kademlia_rpc::ConnectionInfo&>(
      ::kademlia_rpc::_ConnectionInfo_default_instance_);
}
inline const ::kademlia_rpc::ConnectionInfo& GetQuery::caller() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.GetQuery.caller)
  return _internal_caller();
}
inline void GetQuery::unsafe_arena_set_allocated_caller(
    ::kademlia_rpc::ConnectionInfo* caller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caller_);
  }
  caller_ = caller;
  if (caller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kademlia_rpc.GetQuery.caller)
}
inline ::kademlia_rpc::ConnectionInfo* GetQuery::release_caller() {
  
  ::kademlia_rpc::ConnectionInfo* temp = caller_;
  caller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kademlia_rpc::ConnectionInfo* GetQuery::unsafe_arena_release_caller() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.GetQuery.caller)
  
  ::kademlia_rpc::ConnectionInfo* temp = caller_;
  caller_ = nullptr;
  return temp;
}
inline ::kademlia_rpc::ConnectionInfo* GetQuery::_internal_mutable_caller() {
  
  if (caller_ == nullptr) {
    auto* p = CreateMaybeMessage<::kademlia_rpc::ConnectionInfo>(GetArena());
    caller_ = p;
  }
  return caller_;
}
inline ::kademlia_rpc::ConnectionInfo* GetQuery::mutable_caller() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.GetQuery.caller)
  return _internal_mutable_caller();
}
inline void GetQuery::set_allocated_caller(::kademlia_rpc::ConnectionInfo* caller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caller_;
  }
  if (caller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caller);
    if (message_arena != submessage_arena) {
      caller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caller, submessage_arena);
    }
    
  } else {
    
  }
  caller_ = caller;
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.GetQuery.caller)
}

// string key = 3;
inline void GetQuery::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& GetQuery::key() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.GetQuery.key)
  return _internal_key();
}
inline void GetQuery::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.GetQuery.key)
}
inline std::string* GetQuery::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.GetQuery.key)
  return _internal_mutable_key();
}
inline const std::string& GetQuery::_internal_key() const {
  return key_.Get();
}
inline void GetQuery::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetQuery::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kademlia_rpc.GetQuery.key)
}
inline void GetQuery::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kademlia_rpc.GetQuery.key)
}
inline void GetQuery::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kademlia_rpc.GetQuery.key)
}
inline std::string* GetQuery::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetQuery::release_key() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.GetQuery.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetQuery::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.GetQuery.key)
}

// -------------------------------------------------------------------

// GetReply

// uint64 magic = 1;
inline void GetReply::clear_magic() {
  magic_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetReply::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetReply::magic() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.GetReply.magic)
  return _internal_magic();
}
inline void GetReply::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  magic_ = value;
}
inline void GetReply::set_magic(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.GetReply.magic)
}

// bytes value = 2;
inline void GetReply::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GetReply::value() const {
  // @@protoc_insertion_point(field_get:kademlia_rpc.GetReply.value)
  return _internal_value();
}
inline void GetReply::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kademlia_rpc.GetReply.value)
}
inline std::string* GetReply::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kademlia_rpc.GetReply.value)
  return _internal_mutable_value();
}
inline const std::string& GetReply::_internal_value() const {
  return value_.Get();
}
inline void GetReply::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetReply::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kademlia_rpc.GetReply.value)
}
inline void GetReply::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kademlia_rpc.GetReply.value)
}
inline void GetReply::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kademlia_rpc.GetReply.value)
}
inline std::string* GetReply::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetReply::release_value() {
  // @@protoc_insertion_point(field_release:kademlia_rpc.GetReply.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetReply::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kademlia_rpc.GetReply.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kademlia_rpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kademlia_2eproto
